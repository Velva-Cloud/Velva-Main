services:
  mysql:
    image: mysql:8.0
    container_name: hosting_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:?set in environment}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-panel}
      MYSQL_USER: ${MYSQL_USER:-panel}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:?set in environment}
    volumes:
      - mysql_data:/var/lib/mysql
    command: ["--default-authentication-plugin=mysql_native_password"]
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p${MYSQL_ROOT_PASSWORD} -h 127.0.0.1 --silent"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: hosting_redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    build: ./backend
    container_name: hosting_backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      # Force Prisma to use the mysql service hostname inside the Docker network
      DATABASE_URL: ${DATABASE_URL:-mysql://${MYSQL_USER:-panel}:${MYSQL_PASSWORD:-panel}@mysql:3306/${MYSQL_DATABASE:-panel}}
      PORT: ${BACKEND_PORT:-4000}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      # Persist CA/certs in a named volume within the container
      CA_KEY_PATH: /app/certs/ca.key
      CA_CERT_PATH: /app/certs/ca.crt
      DAEMON_CA: /app/certs/ca.crt
      DAEMON_CLIENT_CERT: /app/certs/panel.crt
      DAEMON_CLIENT_KEY: /app/certs/panel.key
      # Feature flags (defaults safe for production)
      ENABLE_SWAGGER: ${ENABLE_SWAGGER:-false}
      ENABLE_METRICS: ${ENABLE_METRICS:-false}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - panel_certs:/app/certs
    expose:
      - "${BACKEND_PORT:-4000}"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:${BACKEND_PORT:-4000}/api/status/system > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s

  frontend:
    build: ./frontend
    container_name: hosting_frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-/api}
      API_PROXY_TARGET: http://backend:${BACKEND_PORT:-4000}
      PORT: ${FRONTEND_PORT:-3000}
    depends_on:
      backend:
        condition: service_healthy
    expose:
      - "${FRONTEND_PORT:-3000}"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:${FRONTEND_PORT:-3000} > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  daemon:
    build: ./daemon
    container_name: hosting_daemon
    restart: unless-stopped
    hostname: ${DAEMON_HOSTNAME:-node-1}
    environment:
      DOCKER_SERVICE_NAME: daemon
      PANEL_URL: http://backend:${BACKEND_PORT:-4000}/api
      REGISTRATION_SECRET: ${NODE_REGISTRATION_SECRET:?set in backend .env and here}
      NODE_NAME: ${DAEMON_NODE_NAME:-node-1}
      NODE_LOCATION: ${DAEMON_NODE_LOCATION:-dc-1}
      CERTS_DIR: /data/certs
      DATA_DIR: /data
      DAEMON_PORT: ${DAEMON_PORT:-9443}
      SFTP_PORT: ${SFTP_PORT:-2222}
      SFTP_PASSWORD: ${SFTP_PASSWORD:?strong password required}
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - daemon_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${SFTP_PUBLISH_PORT:-2223}:${SFTP_PORT:-2222}"
    expose:
      - "${DAEMON_PORT:-9443}"
    networks:
      default:
        aliases:
          - ${DAEMON_HOSTNAME:-node-1}

volumes:
  mysql_data:
  daemon_data:
  redis_data:
  panel_certs: