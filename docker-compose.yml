services:
  mysql:
    image: mysql:8.0
    container_name: hosting_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: panel
      MYSQL_USER: panel
      MYSQL_PASSWORD: panel
    volumes:
      - mysql_data:/var/lib/mysql
    command: ["--default-authentication-plugin=mysql_native_password"]
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -proot -h 127.0.0.1 --silent"]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    build: ./backend
    container_name: hosting_backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      DATABASE_URL: mysql://panel:panel@mysql:3306/panel
      FRONTEND_URL: http://localhost:3000
      PORT: 4000
      SEED_ON_BOOT: "true"
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "4000:4000"
    healthcheck:
      # Use lightweight health endpoint rather than Swagger UI to reduce flakiness
      test: ["CMD-SHELL", "wget -qO- http://localhost:4000/api/status/system > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s

  frontend:
    build: ./frontend
    container_name: hosting_frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE_URL: /api
      API_PROXY_TARGET: http://backend:4000
      PORT: 3000
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:3000 > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

# Remove caddy here to avoid port 80/443 conflicts with your existing site.
# Configure your existing web server to reverse proxy the subdomain instead.

volumes:
  mysql_data: