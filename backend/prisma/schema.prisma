generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  SUPPORT
  USER
}

enum SubscriptionStatus {
  active
  past_due
  canceled
  expired
}

enum ServerStatus {
  running
  stopped
  suspended
}

enum NodeStatus {
  online
  offline
}

enum LogAction {
  login
  server_create
  plan_change
}

enum TransactionStatus {
  success
  failed
  pending
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  password           String?
  oauthProvider      String?
  oauthId            String?
  role               Role      @default(USER)
  createdAt          DateTime  @default(now())
  lastLogin          DateTime?
  stripeCustomerId   String?
  suspended          Boolean   @default(false)

  subscriptions Subscription[]
  servers       Server[]
  logs          Log[]
  resetTokens   PasswordResetToken[]
  transactions  Transaction[]
  events        ServerEvent[]
  access        ServerAccess[]
}

model Plan {
  id             Int      @id @default(autoincrement())
  name           String
  pricePerMonth  Decimal  @db.Decimal(10, 2)
  resources      Json
  isActive       Boolean  @default(true)

  subscriptions  Subscription[]
  servers        Server[]
  transactions   Transaction[]
}

model Subscription {
  id         Int                 @id @default(autoincrement())
  userId     Int
  planId     Int
  startDate  DateTime
  endDate    DateTime?
  status     SubscriptionStatus
  graceUntil DateTime?

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  transactions Transaction[]
}

model Node {
  id         Int        @id @default(autoincrement())
  name       String
  location   String
  ip         String
  status     NodeStatus
  capacity   Int

  // Auto-registration and connection details
  approved            Boolean    @default(false)
  apiUrl              String?
  publicIp            String?
  capacityCpuCores    Int?
  capacityMemoryMb    Int?
  capacityDiskMb      Int?
  lastSeenAt          DateTime?
  csrPem              String?    @db.LongText
  csrFingerprint      String?
  nodeCertPem         String?    @db.LongText
  registrationNonce   String?

  servers  Server[]
}

model Server {
  id        Int          @id @default(autoincrement())
  userId    Int
  planId    Int
  nodeId    Int?
  name      String
  status    ServerStatus
  createdAt DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])
  node Node? @relation(fields: [nodeId], references: [id])
  events ServerEvent[]
  access ServerAccess[]
}

model Log {
  id        Int       @id @default(autoincrement())
  userId    Int?
  action    LogAction
  metadata  Json?
  timestamp DateTime  @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id             Int                @id @default(autoincrement())
  userId         Int
  subscriptionId Int?
  planId         Int?
  amount         Decimal            @db.Decimal(10, 2)
  currency       String             @default("GBP")
  gateway        String             @default("mock")
  status         TransactionStatus
  metadata       Json?
  createdAt      DateTime           @default(now())

  user         User         @relation(fields: [userId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  plan         Plan?        @relation(fields: [planId], references: [id])
}

model Setting {
  key   String @id
  value Json
  updatedAt DateTime @updatedAt
}

model NodeJoinCode {
  id           Int       @id @default(autoincrement())
  code         String    @unique
  createdAt    DateTime  @default(now())
  expiresAt    DateTime
  used         Boolean   @default(false)
  usedAt       DateTime?
  usedNodeId   Int?
  createdById  Int?
}

model ServerEvent {
  id        Int      @id @default(autoincrement())
  serverId  Int
  userId    Int?
  type      String
  message   String?
  data      Json?
  createdAt DateTime @default(now())

  server Server @relation(fields: [serverId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])

  @@index([serverId, createdAt])
  @@index([type, createdAt])
}

enum ServerAccessRole {
  VIEWER
  OPERATOR
  ADMIN
}

model ServerAccess {
  id        Int              @id @default(autoincrement())
  serverId  Int
  userId    Int
  role      ServerAccessRole @default(VIEWER)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  server Server @relation(fields: [serverId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([serverId, userId])
  @@index([serverId])
  @@index([userId])
}